{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bonjour\\\\Desktop\\\\react\\\\frontend\\\\src\\\\components\\\\dashbords.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Chart from 'chart.js'; // Assurez-vous d'installer cette bibliothèque via npm/yarn\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [salesData, setSalesData] = useState([]);\n\n  // Fonction pour récupérer les données de ventes depuis l'API ou la base de données\n  const fetchSalesData = async () => {\n    // Ici, vous effectueriez une requête API ou une requête de base de données pour obtenir les données de ventes\n    // Remplacez ce code par votre logique de récupération des données\n    const response = await fetch('url_de_votre_api/ventes');\n    const data = await response.json();\n    setSalesData(data);\n  };\n\n  // Utilisation de useEffect pour appeler fetchSalesData une fois que le composant est monté\n  useEffect(() => {\n    fetchSalesData();\n  }, []);\n\n  // Créer un graphique à l'aide de Chart.js\n  useEffect(() => {\n    const ctx = document.getElementById('salesChart').getContext('2d');\n    new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: salesData.map(item => item.month),\n        // Supposons que salesData contienne des objets avec une propriété 'month'\n        datasets: [{\n          label: 'Ventes mensuelles',\n          data: salesData.map(item => item.amount),\n          // Supposons que salesData contienne des objets avec une propriété 'amount'\n          backgroundColor: 'rgba(54, 162, 235, 0.6)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }\n    });\n  }, [salesData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tableau de bord de gestion de facturation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"salesChart\",\n        width: \"400\",\n        height: \"200\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"G0sgAgsUDrKHop/3wV6s88zT+FE=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Chart","jsxDEV","_jsxDEV","Dashboard","_s","salesData","setSalesData","fetchSalesData","response","fetch","data","json","ctx","document","getElementById","getContext","type","labels","map","item","month","datasets","label","amount","backgroundColor","borderColor","borderWidth","options","scales","yAxes","ticks","beginAtZero","children","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","_c","$RefreshReg$"],"sources":["C:/Users/Bonjour/Desktop/react/frontend/src/components/dashbords.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Chart from 'chart.js'; // Assurez-vous d'installer cette bibliothèque via npm/yarn\r\n\r\nfunction Dashboard() {\r\n  const [salesData, setSalesData] = useState([]);\r\n\r\n  // Fonction pour récupérer les données de ventes depuis l'API ou la base de données\r\n  const fetchSalesData = async () => {\r\n    // Ici, vous effectueriez une requête API ou une requête de base de données pour obtenir les données de ventes\r\n    // Remplacez ce code par votre logique de récupération des données\r\n    const response = await fetch('url_de_votre_api/ventes');\r\n    const data = await response.json();\r\n    setSalesData(data);\r\n  };\r\n\r\n  // Utilisation de useEffect pour appeler fetchSalesData une fois que le composant est monté\r\n  useEffect(() => {\r\n    fetchSalesData();\r\n  }, []);\r\n\r\n  // Créer un graphique à l'aide de Chart.js\r\n  useEffect(() => {\r\n    const ctx = document.getElementById('salesChart').getContext('2d');\r\n    new Chart(ctx, {\r\n      type: 'bar',\r\n      data: {\r\n        labels: salesData.map(item => item.month), // Supposons que salesData contienne des objets avec une propriété 'month'\r\n        datasets: [{\r\n          label: 'Ventes mensuelles',\r\n          data: salesData.map(item => item.amount), // Supposons que salesData contienne des objets avec une propriété 'amount'\r\n          backgroundColor: 'rgba(54, 162, 235, 0.6)',\r\n          borderColor: 'rgba(54, 162, 235, 1)',\r\n          borderWidth: 1\r\n        }]\r\n      },\r\n      options: {\r\n        scales: {\r\n          yAxes: [{\r\n            ticks: {\r\n              beginAtZero: true\r\n            }\r\n          }]\r\n        }\r\n      }\r\n    });\r\n  }, [salesData]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Tableau de bord de gestion de facturation</h1>\r\n      <div>\r\n        <canvas id=\"salesChart\" width=\"400\" height=\"200\"></canvas>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,UAAU,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMS,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yBAAyB,CAAC;IACvD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClCL,YAAY,CAACI,IAAI,CAAC;EACpB,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACdQ,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAR,SAAS,CAAC,MAAM;IACd,MAAMa,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;IAClE,IAAIf,KAAK,CAACY,GAAG,EAAE;MACbI,IAAI,EAAE,KAAK;MACXN,IAAI,EAAE;QACJO,MAAM,EAAEZ,SAAS,CAACa,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,CAAC;QAAE;QAC3CC,QAAQ,EAAE,CAAC;UACTC,KAAK,EAAE,mBAAmB;UAC1BZ,IAAI,EAAEL,SAAS,CAACa,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACI,MAAM,CAAC;UAAE;UAC1CC,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,uBAAuB;UACpCC,WAAW,EAAE;QACf,CAAC;MACH,CAAC;MACDC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,KAAK,EAAE,CAAC;YACNC,KAAK,EAAE;cACLC,WAAW,EAAE;YACf;UACF,CAAC;QACH;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC1B,SAAS,CAAC,CAAC;EAEf,oBACEH,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAA8B,QAAA,EAAI;IAAyC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClDlC,OAAA;MAAA8B,QAAA,eACE9B,OAAA;QAAQmC,EAAE,EAAC,YAAY;QAACC,KAAK,EAAC,KAAK;QAACC,MAAM,EAAC;MAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAChC,EAAA,CApDQD,SAAS;AAAAqC,EAAA,GAATrC,SAAS;AAsDlB,eAAeA,SAAS;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}